
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ADD AMPERSAND AND_EQUAL ARRAY ARRAY_CAST AS ASSIGN ATTRIBUTE BOOLEAN_AND BOOLEAN_OR BOOL_CAST BREAK CALLABLE CASE CATCH CBRA CLASS CLASS_C CLONE CLOSE_TAG COALESCE COALESCE_EQUAL COMMA COMMENT CONCAT CONCAT_EQUAL CONST CONSTANT_ENCAPSED_STRING CONTINUE CPAR CURLY_OPEN DEC DECLARE DEFAULT DIR DIV DIV_EQUAL DNUMBER DO DOC_COMMENT DOLLAR_OPEN_CURLY_BRACES DOUBLE_ARROW DOUBLE_CAST DOUBLE_COLON ECHO ELLIPSIS ELSE ELSEIF EMPTY ENCAPSED_AND_WHITESPACE ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDLINE ENDSWITCH ENDWHILE ENUM EVAL EXIT EXTENDS FILE FINAL FINALLY FN FOR FOREACH FUNCTION FUNC_C GLOBAL GOTO HALT_COMPILER HEREDOC IF IMPLEMENTS INC INCLUDE INCLUDE_ONCE INSTANCE_OF INSTEADOF INTERFACE INT_CAST ISSET IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LINE LIST LNUMBER LOGICAL_AND LOGICAL_OR LOGICAL_XOR MAP_ITEM MATCH METHOD_C MINUS_EQUAL MUL NAMESPACE NAME_FULLY_QUALIFIED NAME_QUALIFIED NEW NS_C NS_SEPARATOR NULLSAFE_OBJECT_OPERATOR NUM_STRING OBJECT_CAST OBJECT_OPERATOR OBRA OPAR OPEN_TAG OPEN_TAG_WITH_ECHO OR_EQUAL PLUS_EQUAL POW POW_EQUAL PRINT PRIVATE PROTECTED PUBLIC READONLY REQUIRE REQUIRE_ONCE RETURN SL SL_EQUAL SPACESHIP SR SR_EQUAL STATIC STRING STRING_CAST STRING_VARNAME SUB SWITCH THROW TRAIT TRAIT_C TRY UNSET UNSET_CAST USE VAR VARIABLE WHILE WHITESPACE XOR_EQUAL YIELD YIELD_FROMscript :   script_section\n              |   script script_sectionscript_section :   start_tag\n                    |   function_static_declaration\n                    |   end_tagstart_tag :   OPEN_TAG\n                    |   OPEN_TAG_WITH_ECHOend_tag :   CLOSE_TAGfunction_static_declaration :   STATIC static_variable_name_list ENDLINEstatic_variable_name_list : DNUMBER'
    
_lr_action_items = {'OPEN_TAG':([0,1,2,3,4,5,6,7,9,10,13,],[6,6,-1,-3,-4,-5,-6,-7,-8,-2,-9,]),'OPEN_TAG_WITH_ECHO':([0,1,2,3,4,5,6,7,9,10,13,],[7,7,-1,-3,-4,-5,-6,-7,-8,-2,-9,]),'STATIC':([0,1,2,3,4,5,6,7,9,10,13,],[8,8,-1,-3,-4,-5,-6,-7,-8,-2,-9,]),'CLOSE_TAG':([0,1,2,3,4,5,6,7,9,10,13,],[9,9,-1,-3,-4,-5,-6,-7,-8,-2,-9,]),'$end':([1,2,3,4,5,6,7,9,10,13,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-9,]),'DNUMBER':([8,],[12,]),'ENDLINE':([11,12,],[13,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'script':([0,],[1,]),'script_section':([0,1,],[2,10,]),'start_tag':([0,1,],[3,3,]),'function_static_declaration':([0,1,],[4,4,]),'end_tag':([0,1,],[5,5,]),'static_variable_name_list':([8,],[11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> script","S'",1,None,None,None),
  ('script -> script_section','script',1,'p_script','php_parser.py',11),
  ('script -> script script_section','script',2,'p_script','php_parser.py',12),
  ('script_section -> start_tag','script_section',1,'p_script_section','php_parser.py',15),
  ('script_section -> function_static_declaration','script_section',1,'p_script_section','php_parser.py',16),
  ('script_section -> end_tag','script_section',1,'p_script_section','php_parser.py',17),
  ('start_tag -> OPEN_TAG','start_tag',1,'p_start_tag','php_parser.py',20),
  ('start_tag -> OPEN_TAG_WITH_ECHO','start_tag',1,'p_start_tag','php_parser.py',21),
  ('end_tag -> CLOSE_TAG','end_tag',1,'p_end_tag','php_parser.py',24),
  ('function_static_declaration -> STATIC static_variable_name_list ENDLINE','function_static_declaration',3,'p_function_static_declaration','php_parser.py',27),
  ('static_variable_name_list -> DNUMBER','static_variable_name_list',1,'p_static_variable_name_list','php_parser.py',30),
]
